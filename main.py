import os
import time
import json
import datetime
import requests
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
from sklearn.preprocessing import MinMaxScaler
import ta
import warnings
import google.generativeai as genai
from dotenv import load_dotenv
from vnstock import *
import traceback
from vnstock.explorer.vci import Quote, Finance
import matplotlib.dates as mdates
import mplfinance as mpf

# --- Th√™m imports cho AI ---
import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader
# --- Th√™m import cho ti·∫øn tr√¨nh ---
from tqdm import tqdm

warnings.filterwarnings("ignore")

# --- C·∫•u h√¨nh AI to√†n c·ª•c ---
# Ki·ªÉm tra xem c√≥ GPU h·ªó tr·ª£ MPS (Mac Silicon) ho·∫∑c CUDA (NVIDIA) kh√¥ng, n·∫øu c√≥ th√¨ d√πng GPU, n·∫øu kh√¥ng th√¨ d√πng CPU
if torch.backends.mps.is_available():
    device = torch.device("mps")
    print("üöÄ ƒêang s·ª≠ d·ª•ng thi·∫øt b·ªã cho AI: Apple Silicon GPU (MPS)")
elif torch.cuda.is_available():
    device = torch.device("cuda")
    print("üöÄ ƒêang s·ª≠ d·ª•ng thi·∫øt b·ªã cho AI: NVIDIA GPU (CUDA)")
else:
    device = torch.device("cpu")
    print("üíª ƒêang s·ª≠ d·ª•ng thi·∫øt b·ªã cho AI: CPU")

# --- C·∫•u h√¨nh to√†n c·ª•c cho ph√¢n t√≠ch d·ªØ li·ªáu ---
# Th·ªùi gian l·∫•y d·ªØ li·ªáu (ƒê√É THAY ƒê·ªîI TH√ÄNH 10 NƒÇM)
GLOBAL_START_DATE = (datetime.today() - timedelta(days=365 * 10)).strftime("%Y-%m-%d") # L·∫•y d·ªØ li·ªáu 10 nƒÉm g·∫ßn nh·∫•t
GLOBAL_END_DATE = datetime.today().strftime("%Y-%m-%d")

# --- C·∫•u h√¨nh to√†n c·ª•c cho m√¥ h√¨nh AI LSTM ---
GLOBAL_EPOCHS = 50       # S·ªë v√≤ng l·∫∑p hu·∫•n luy·ªán
GLOBAL_BATCH_SIZE = 64    # K√≠ch th∆∞·ªõc l√¥ d·ªØ li·ªáu
GLOBAL_SEQ_LENGTH = 2000   # ƒê·ªô d√†i chu·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o cho m·ªói l·∫ßn d·ª± ƒëo√°n
GLOBAL_FORECAST_DAYS = 10 # S·ªë ng√†y d·ª± b√°o t∆∞∆°ng lai

# --- C·∫•u h√¨nh API v√† th∆∞ m·ª•c l∆∞u tr·ªØ ---
load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY") # Kh√≥a API cho Google Gemini
if not GOOGLE_API_KEY:
    raise ValueError("Vui l√≤ng ƒë·∫∑t GOOGLE_API_KEY trong file .env")
genai.configure(api_key=GOOGLE_API_KEY)
os.makedirs("vnstocks_data", exist_ok=True) # T·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ d·ªØ li·ªáu n·∫øu ch∆∞a t·ªìn t·∫°i

# --- H√†m ti·ªán √≠ch ---
def safe_float(val):
    """Chuy·ªÉn ƒë·ªïi gi√° tr·ªã sang float an to√†n, tr·∫£ v·ªÅ None n·∫øu kh√¥ng h·ª£p l·ªá."""
    try:
        if val is None or (isinstance(val, float) and (np.isnan(val) or np.isinf(val))):
            return None
        return float(val)
    except (TypeError, ValueError):
        return None

def safe_format(val, fmt=".2f"):
    """ƒê·ªãnh d·∫°ng gi√° tr·ªã float an to√†n, tr·∫£ v·ªÅ 'N/A' n·∫øu kh√¥ng h·ª£p l·ªá."""
    try:
        if val is None or (isinstance(val, float) and (np.isnan(val) or np.isinf(val))):
            return "N/A"
        return f"{val:{fmt}}"
    except (TypeError, ValueError):
        return "N/A"

# --- H√†m l·∫•y d·ªØ li·ªáu ---
def get_stock_data(symbol):
    """L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ gi√° c·ªï phi·∫øu t·ª´ VCI v√† l∆∞u v√†o file CSV."""
    try:
        quote = Quote(symbol=symbol)
        df = quote.history(start=GLOBAL_START_DATE, end=GLOBAL_END_DATE, interval="1D")
        if df is not None and not df.empty:
            df.rename(columns={
                "time": "Date", "open": "Open", "high": "High",
                "low": "Low", "close": "Close", "volume": "Volume"
            }, inplace=True)
            df["Date"] = pd.to_datetime(df["Date"])
            df.set_index("Date", inplace=True)
            df.sort_index(inplace=True)
            df.to_csv(f"vnstocks_data/{symbol}_data.csv")
            print(f"‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu cho m√£ {symbol} v√†o file 'vnstocks_data/{symbol}_data.csv'")
            return df
        else:
            print(f"‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu cho m√£ {symbol}")
            return None
    except Exception as e:
        print(f"‚ùå Exception khi l·∫•y d·ªØ li·ªáu cho m√£ {symbol}: {str(e)}")
        return None

def get_financial_data(symbol):
    """L·∫•y d·ªØ li·ªáu b√°o c√°o t√†i ch√≠nh (12 qu√Ω g·∫ßn nh·∫•t) t·ª´ VCI v√† l∆∞u v√†o file CSV."""
    try:
        financial_obj = Finance(symbol=symbol)
        financial_data = financial_obj.ratio(period="quarter", lang="en", flatten_columns=True).head(13)
        if financial_data is not None and not financial_data.empty:
            financial_data.to_csv(f"vnstocks_data/{symbol}_financial.csv", index=False)
            print(f"‚úÖ ƒê√£ l∆∞u BCTC cho m√£ {symbol} v√†o file 'vnstocks_data/{symbol}_financial.csv'")
            return financial_data
        else:
            print(f"‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c BCTC cho m√£ {symbol}")
            return None
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y BCTC cho {symbol}: {str(e)}")
        return None

def get_market_data():
    """L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ c·ªßa VNINDEX t·ª´ VCI v√† l∆∞u v√†o file CSV."""
    try:
        quoteVNI = Quote(symbol="VNINDEX")
        vnindex = quoteVNI.history(start=GLOBAL_START_DATE, end=GLOBAL_END_DATE, interval="1D")
        if vnindex is not None and not vnindex.empty:
            vnindex.rename(columns={
                "time": "Date", "open": "Open", "high": "High",
                "low": "Low", "close": "Close", "volume": "Volume"
            }, inplace=True)
            vnindex["Date"] = pd.to_datetime(vnindex["Date"])
            vnindex.set_index("Date", inplace=True)
            vnindex.sort_index(inplace=True)
            vnindex.to_csv("vnstocks_data/VNINDEX_data.csv")
            print(f"‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu VNINDEX v√†o file 'vnstocks_data/VNINDEX_data.csv'")
            return vnindex
        else:
            print("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu VNINDEX")
            return None
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu th·ªã tr∆∞·ªùng (VNINDEX): {str(e)}")
        return None

# --- Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ---
def preprocess_stock_data(df):
    """Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu gi√° c·ªï phi·∫øu c∆° b·∫£n (s·∫Øp x·∫øp, x·ª≠ l√Ω NaN, t√≠nh returns, MA)."""
    df.index = pd.to_datetime(df.index)
    df.sort_index(ascending=True, inplace=True)
    df.ffill(inplace=True)
    df.bfill(inplace=True)
    df["returns"] = df["Close"].pct_change()
    df["MA_10"] = df["Close"].rolling(window=10).mean()
    df["MA_50"] = df["Close"].rolling(window=50).mean()
    df["volatility"] = df["returns"].rolling(window=10).std()
    return df

def create_features(df):
    """T·∫°o c√°c ch·ªâ b√°o k·ªπ thu·∫≠t s·ª≠ d·ª•ng th∆∞ vi·ªán 'ta'."""
    df["SMA_10"] = ta.trend.sma_indicator(df["Close"], window=10)
    df["SMA_20"] = ta.trend.sma_indicator(df["Close"], window=20)
    df["SMA_50"] = ta.trend.sma_indicator(df["Close"], window=50)
    df["SMA_200"] = ta.trend.sma_indicator(df["Close"], window=200)
    df["EMA_12"] = ta.trend.ema_indicator(df["Close"], window=12)
    df["EMA_26"] = ta.trend.ema_indicator(df["Close"], window=26)
    df["RSI"] = ta.momentum.rsi(df["Close"], window=14)
    df["MACD"] = df["EMA_12"] - df["EMA_26"]
    df["MACD_Signal"] = ta.trend.ema_indicator(df["MACD"], window=9)
    df["MACD_Hist"] = df["MACD"] - df["MACD_Signal"]
    df["BB_Upper"], df["BB_Middle"], df["BB_Lower"] = ta.volatility.bollinger_hband_indicator(df["Close"]), ta.volatility.bollinger_mavg(df["Close"]), ta.volatility.bollinger_lband_indicator(df["Close"])
    df["Volume_MA"] = df["Volume"].rolling(window=20).mean()
    return df

# --- T√≠nh to√°n Relative Strength ---
def calculate_relative_strength(df_stock, df_index):
    """T√≠nh Relative Strength (RS) v√† c√°c ch·ªâ b√°o RS Point theo c√¥ng th·ª©c ti√™u chu·∫©n."""
    df_merged = df_stock[["Close"]].join(df_index[["Close"]].rename(columns={"Close": "Index_Close"}), how="inner")
    if df_merged.empty or df_merged["Index_Close"].isna().all():
        print("‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng c√≥ d·ªØ li·ªáu ch·ªâ s·ªë th·ªã tr∆∞·ªùng ƒë·ªÉ t√≠nh RS. G√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh.")
        # G√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh cho t·∫•t c·∫£ c√°c ch·ªâ b√°o RS
        df_stock["RS"] = 1.0
        df_stock["RS_Point"] = 0.0
        df_stock["RS_Point_252"] = 0.0
        df_stock["RS_SMA_10"] = 1.0
        df_stock["RS_SMA_20"] = 1.0
        df_stock["RS_SMA_50"] = 1.0
        df_stock["RS_SMA_200"] = 1.0
        df_stock["RS_Point_SMA_10"] = 0.0
        df_stock["RS_Point_SMA_20"] = 0.0
        df_stock["RS_Point_SMA_50"] = 0.0
        df_stock["RS_Point_SMA_200"] = 0.0
        df_stock["RS_Point_252_SMA_10"] = 0.0
        df_stock["RS_Point_252_SMA_20"] = 0.0
        df_stock["RS_Point_252_SMA_50"] = 0.0
        df_stock["RS_Point_252_SMA_200"] = 0.0
        return df_stock

    df_merged["Index_Close"] = df_merged["Index_Close"].ffill().bfill()

    # T√≠nh RS = (P(t)/P(t-1)) / (Index(t)/Index(t-1))
    price_ratio = df_merged["Close"] / df_merged["Close"].shift(1)
    index_ratio = df_merged["Index_Close"] / df_merged["Index_Close"].shift(1)
    df_merged["RS"] = np.where(index_ratio != 0, price_ratio / index_ratio, 1.0)

    # T√≠nh c√°c th√†nh ph·∫ßn ROC cho RS_Point
    roc_63 = (df_merged["Close"] / df_merged["Close"].shift(63) - 1) * 100
    roc_126 = (df_merged["Close"] / df_merged["Close"].shift(126) - 1) * 100
    roc_189 = (df_merged["Close"] / df_merged["Close"].shift(189) - 1) * 100
    roc_252_for_rs_point = (df_merged["Close"] / df_merged["Close"].shift(252) - 1) * 100

    # T√≠nh RS_Point theo c√¥ng th·ª©c: (ROC(63)*0.4 + ROC(126)*0.2 + ROC(189)*0.2 + ROC(252)*0.2)
    # V√¨ ROC ƒë√£ ƒë∆∞·ª£c nh√¢n 100, k·∫øt qu·∫£ kh√¥ng c·∫ßn nh√¢n th√™m.
    df_merged["RS_Point"] = (
        roc_63.fillna(0) * 0.4 +
        roc_126.fillna(0) * 0.2 +
        roc_189.fillna(0) * 0.2 +
        roc_252_for_rs_point.fillna(0) * 0.2
    )

    # T√≠nh RS_Point_252 = ((C / Ref(C, -252)) - 1) * 100
    df_merged["RS_Point_252"] = ((df_merged["Close"] / df_merged["Close"].shift(252)) - 1) * 100

    # T√≠nh c√°c ƒë∆∞·ªùng trung b√¨nh cho RS, RS_Point, RS_Point_252
    df_merged["RS_SMA_10"] = ta.trend.sma_indicator(df_merged["RS"], window=10)
    df_merged["RS_SMA_20"] = ta.trend.sma_indicator(df_merged["RS"], window=20)
    df_merged["RS_SMA_50"] = ta.trend.sma_indicator(df_merged["RS"], window=50)
    df_merged["RS_SMA_200"] = ta.trend.sma_indicator(df_merged["RS"], window=200)

    df_merged["RS_Point_SMA_10"] = ta.trend.sma_indicator(df_merged["RS_Point"], window=10)
    df_merged["RS_Point_SMA_20"] = ta.trend.sma_indicator(df_merged["RS_Point"], window=20)
    df_merged["RS_Point_SMA_50"] = ta.trend.sma_indicator(df_merged["RS_Point"], window=50)
    df_merged["RS_Point_SMA_200"] = ta.trend.sma_indicator(df_merged["RS_Point"], window=200)

    df_merged["RS_Point_252_SMA_10"] = ta.trend.sma_indicator(df_merged["RS_Point_252"], window=10)
    df_merged["RS_Point_252_SMA_20"] = ta.trend.sma_indicator(df_merged["RS_Point_252"], window=20)
    df_merged["RS_Point_252_SMA_50"] = ta.trend.sma_indicator(df_merged["RS_Point_252"], window=50)
    df_merged["RS_Point_252_SMA_200"] = ta.trend.sma_indicator(df_merged["RS_Point_252"], window=200)

    # G√°n c√°c ch·ªâ b√°o tr·ªü l·∫°i dataframe g·ªëc
    cols_to_join = [
        "RS", "RS_Point", "RS_Point_252",
        "RS_SMA_10", "RS_SMA_20", "RS_SMA_50", "RS_SMA_200",
        "RS_Point_SMA_10", "RS_Point_SMA_20", "RS_Point_SMA_50", "RS_Point_SMA_200",
        "RS_Point_252_SMA_10", "RS_Point_252_SMA_20", "RS_Point_252_SMA_50", "RS_Point_252_SMA_200"
    ]
    df_stock = df_stock.join(df_merged[cols_to_join], how="left")

    # X·ª≠ l√Ω gi√° tr·ªã NaN
    df_stock["RS"].fillna(1.0, inplace=True)
    df_stock["RS_Point"].fillna(0.0, inplace=True)
    df_stock["RS_Point_252"].fillna(0.0, inplace=True)
    df_stock["RS_SMA_10"].fillna(1.0, inplace=True)
    df_stock["RS_SMA_20"].fillna(1.0, inplace=True)
    df_stock["RS_SMA_50"].fillna(1.0, inplace=True)
    df_stock["RS_SMA_200"].fillna(1.0, inplace=True)
    df_stock["RS_Point_SMA_10"].fillna(0.0, inplace=True)
    df_stock["RS_Point_SMA_20"].fillna(0.0, inplace=True)
    df_stock["RS_Point_SMA_50"].fillna(0.0, inplace=True)
    df_stock["RS_Point_SMA_200"].fillna(0.0, inplace=True)
    df_stock["RS_Point_252_SMA_10"].fillna(0.0, inplace=True)
    df_stock["RS_Point_252_SMA_20"].fillna(0.0, inplace=True)
    df_stock["RS_Point_252_SMA_50"].fillna(0.0, inplace=True)
    df_stock["RS_Point_252_SMA_200"].fillna(0.0, inplace=True)

    return df_stock

# --- M√¥ h√¨nh AI d·ª± b√°o gi√° (LSTM n√¢ng cao h∆°n) ---
class StockDataset(Dataset):
    """Dataset cho m√¥ h√¨nh LSTM."""
    def __init__(self, data, seq_length):
        self.data = data
        self.seq_length = seq_length

    def __len__(self):
        return len(self.data) - self.seq_length

    def __getitem__(self, idx):
        return (torch.FloatTensor(self.data[idx:idx+self.seq_length]),
                torch.FloatTensor(self.data[idx+self.seq_length:idx+self.seq_length+1]))

# --- M√¥ h√¨nh LSTM n√¢ng cao h∆°n v·ªõi nhi·ªÅu l·ªõp v√† tham s·ªë ƒëi·ªÅu ch·ªânh ---
class LSTMModelAdvanced(nn.Module):
    """M√¥ h√¨nh LSTM n√¢ng cao h∆°n v·ªõi nhi·ªÅu l·ªõp LSTM v√† ƒë·∫ßu ra ph·ª©c t·∫°p h∆°n."""
    def __init__(self, input_size=1, hidden_layer_sizes=[128, 64], output_size=1, num_layers_per_block=2, dropout=0.2):
        super().__init__()
        self.hidden_layer_sizes = hidden_layer_sizes
        self.num_blocks = len(hidden_layer_sizes)
        self.dropout = dropout

        # T·∫°o c√°c kh·ªëi LSTM. M·ªói kh·ªëi c√≥ th·ªÉ c√≥ nhi·ªÅu l·ªõp LSTM ch·ªìng l√™n nhau.
        self.lstm_blocks = nn.ModuleList()
        for i in range(self.num_blocks):
            # K√≠ch th∆∞·ªõc ƒë·∫ßu v√†o c·ªßa kh·ªëi hi·ªán t·∫°i
            in_size = input_size if i == 0 else hidden_layer_sizes[i-1]
            # K√≠ch th∆∞·ªõc ·∫©n c·ªßa kh·ªëi hi·ªán t·∫°i
            hidden_size = hidden_layer_sizes[i]
            # T·∫°o LSTM v·ªõi nhi·ªÅu l·ªõp (layers) trong m·ªôt kh·ªëi
            lstm_block = nn.LSTM(in_size, hidden_size, num_layers=num_layers_per_block,
                                 batch_first=True, dropout=dropout if num_layers_per_block > 1 else 0)
            self.lstm_blocks.append(lstm_block)

        # L·ªõp dropout tr∆∞·ªõc l·ªõp ƒë·∫ßu ra
        self.dropout_layer = nn.Dropout(dropout)
        # L·ªõp ƒë·∫ßu ra tuy·∫øn t√≠nh
        self.linear = nn.Linear(hidden_layer_sizes[-1], output_size)

    def forward(self, input_seq):
        x = input_seq
        # Truy·ªÅn qua t·ª´ng kh·ªëi LSTM
        for lstm_block in self.lstm_blocks:
            x, _ = lstm_block(x) # x c√≥ shape [batch_size, seq_len, hidden_size]
        # L·∫•y ƒë·∫ßu ra c·ªßa b∆∞·ªõc th·ªùi gian cu·ªëi c√πng
        x = x[:, -1, :] # x c√≥ shape [batch_size, hidden_size]
        # √Åp d·ª•ng dropout
        x = self.dropout_layer(x)
        # L·ªõp ƒë·∫ßu ra
        predictions = self.linear(x) # predictions c√≥ shape [batch_size, output_size]
        return predictions

def train_lstm_model(df, symbol):
    """Hu·∫•n luy·ªán m√¥ h√¨nh LSTM n√¢ng cao h∆°n v√† d·ª± b√°o gi√°."""
    try:
        print(f"ü§ñ ƒêang chu·∫©n b·ªã d·ªØ li·ªáu cho m√¥ h√¨nh AI c·ªßa {symbol}...")
        data = df[['Close']].values.astype(float)
        scaler = MinMaxScaler(feature_range=(-1, 1))
        scaled_data = scaler.fit_transform(data)

        dataset = StockDataset(scaled_data, GLOBAL_SEQ_LENGTH)
        # ƒêi·ªÅu ch·ªânh batch_size n·∫øu d·ªØ li·ªáu qu√° nh·ªè ƒë·ªÉ tr√°nh l·ªói
        # ƒê·∫£m b·∫£o batch_size t·ªëi thi·ªÉu l√† 1 v√† kh√¥ng v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng m·∫´u trong dataset
        adjusted_batch_size = min(GLOBAL_BATCH_SIZE, len(dataset)) if len(dataset) > 0 else 1
        # Ki·ªÉm tra th√™m ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n tuy·ªát ƒë·ªëi
        if adjusted_batch_size < 1:
            adjusted_batch_size = 1
        train_loader = DataLoader(dataset, batch_size=adjusted_batch_size, shuffle=True)

        # --- C·∫¨P NH·∫¨T: Kh·ªüi t·∫°o m√¥ h√¨nh LSTM n√¢ng cao h∆°n v·ªõi tham s·ªë ·∫©n l·ªõn h∆°n ---
        # V√≠ d·ª•: hidden_layer_sizes=[128, 64] (2 kh·ªëi LSTM v·ªõi 128 v√† 64 units ·∫©n)
        # num_layers_per_block=2 (m·ªói kh·ªëi c√≥ 2 l·ªõp LSTM ch·ªìng l√™n nhau)
        model = LSTMModelAdvanced(
            input_size = 1,
            hidden_layer_sizes=[128, 64], # TƒÉng s·ªë l∆∞·ª£ng units ·∫©n
            output_size = 1,
            num_layers_per_block= 5,       # Th√™m l·ªõp LSTM trong m·ªói kh·ªëi
            dropout= 0.3
        ).to(device) # Chuy·ªÉn m√¥ h√¨nh l√™n thi·∫øt b·ªã (MPS/CUDA/CPU)
        loss_function = nn.MSELoss()
        optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

        print(f"üöÄ ƒêang hu·∫•n luy·ªán m√¥ h√¨nh AI n√¢ng cao h∆°n cho {symbol} tr√™n {device} (Epochs: {GLOBAL_EPOCHS}, Seq Len: {GLOBAL_SEQ_LENGTH})...")
        model.train()

        # --- Th√™m ti·∫øn tr√¨nh ho√†n th√†nh ---
        progress_bar = tqdm(range(GLOBAL_EPOCHS), desc='Epochs')
        for epoch in progress_bar:
            epoch_loss = 0.0
            num_batches = 0
            for seq, labels in train_loader:
                optimizer.zero_grad()
                # --- C·∫¨P NH·∫¨T: Chuy·ªÉn d·ªØ li·ªáu l√™n thi·∫øt b·ªã ---
                seq, labels = seq.to(device), labels.to(device)
                y_pred = model(seq)
                single_loss = loss_function(y_pred, labels)
                single_loss.backward()
                optimizer.step()
                epoch_loss += single_loss.item()
                num_batches += 1
            avg_loss = epoch_loss / num_batches if num_batches > 0 else 0
            # C·∫≠p nh·∫≠t m√¥ t·∫£ thanh ti·∫øn tr√¨nh
            progress_bar.set_postfix({'Avg Loss': f'{avg_loss:.6f}'})

        print(f"\nüîÆ ƒêang d·ª± b√°o gi√° {GLOBAL_FORECAST_DAYS} ng√†y t·ªõi cho {symbol}...")
        model.eval()
        last_seq = scaled_data[-GLOBAL_SEQ_LENGTH:]
        forecast = []
        for _ in range(GLOBAL_FORECAST_DAYS):
            with torch.no_grad():
                # --- C·∫¨P NH·∫¨T: Chuy·ªÉn d·ªØ li·ªáu ƒë·∫ßu v√†o l√™n thi·∫øt b·ªã ---
                seq_tensor = torch.FloatTensor(last_seq).unsqueeze(0).to(device)
                pred = model(seq_tensor).item()
                forecast.append(pred)
                last_seq = np.append(last_seq[1:], [[pred]], axis=0) # C·∫≠p nh·∫≠t chu·ªói ƒë·∫ßu v√†o

        forecast_prices = scaler.inverse_transform(np.array(forecast).reshape(-1, 1)).flatten()

        last_date = df.index[-1]
        forecast_dates = pd.date_range(start=last_date + timedelta(days=1), periods=GLOBAL_FORECAST_DAYS, freq='D')

        # V·∫Ω bi·ªÉu ƒë·ªì d·ª± b√°o
        plt.figure(figsize=(12, 6))
        history_plot = df['Close'].tail(60)
        plt.plot(history_plot.index, history_plot.values, label='Gi√° th·ª±c t·∫ø (60 ng√†y)', color='blue')
        plt.plot(forecast_dates, forecast_prices, label=f'D·ª± b√°o {GLOBAL_FORECAST_DAYS} ng√†y', color='red', marker='o')
        plt.title(f'D·ª± b√°o gi√° {symbol} trong {GLOBAL_FORECAST_DAYS} ng√†y t·ªõi')
        plt.xlabel('Ng√†y')
        plt.ylabel('Gi√° (VND)')
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        forecast_plot_path = f"vnstocks_data/{symbol}_forecast.png"
        plt.savefig(forecast_plot_path)
        plt.close()
        print(f"‚úÖ ƒê√£ l∆∞u bi·ªÉu ƒë·ªì d·ª± b√°o v√†o {forecast_plot_path}")

        return forecast_dates.tolist(), forecast_prices.tolist(), forecast_plot_path

    except Exception as e:
        print(f"‚ùå L·ªói khi hu·∫•n luy·ªán/d·ª± b√°o v·ªõi AI cho {symbol}: {e}")
        traceback.print_exc()
        return [], [], []

# --- Ph√¢n t√≠ch k·ªπ thu·∫≠t v√† v·∫Ω bi·ªÉu ƒë·ªì ---
def plot_stock_analysis(symbol, df, show_volume=True):
    """Ph√¢n t√≠ch k·ªπ thu·∫≠t v√† v·∫Ω bi·ªÉu ƒë·ªì cho m√£ ch·ª©ng kho√°n."""
    try:
        if df is None or len(df) == 0:
            print("‚ùå D·ªØ li·ªáu ph√¢n t√≠ch r·ªóng")
            return {
                "signal": "L·ªñI", "score": 50, "current_price": 0, "rsi_value": 0,
                "ma10": 0, "ma20": 0, "ma50": 0, "ma200": 0, "rs": 1.0, "rs_point": 0,
                "rs_point_252": 0.0,
                "recommendation": "KH√îNG X√ÅC ƒê·ªäNH",
                "open": None, "high": None, "low": None, "volume": None,
                "macd": None, "macd_signal": None, "macd_hist": None,
                "bb_upper": None, "bb_lower": None,
                "volume_ma": None,
                "ichimoku_tenkan_sen": None, "ichimoku_kijun_sen": None,
                "ichimoku_senkou_span_a": None, "ichimoku_senkou_span_b": None, "ichimoku_chikou_span": None,
                "rs_sma_10": None, "rs_sma_20": None, "rs_sma_50": None, "rs_sma_200": None,
                "rs_point_sma_10": None, "rs_point_sma_20": None, "rs_point_sma_50": None, "rs_point_sma_200": None,
                "rs_point_252_sma_10": None, "rs_point_252_sma_20": None,
                "rs_point_252_sma_50": None, "rs_point_252_sma_200": None,
                "forecast_dates": [], "forecast_prices": [], "forecast_plot_path": ""
            }

        df = df.sort_index()
        df = create_features(df)

        # T√≠nh RS (Relative Strength so v·ªõi VNINDEX)
        if symbol.upper() != "VNINDEX":
            try:
                quoteVNI = Quote(symbol="VNINDEX")
                vnindex_df = quoteVNI.history(start=GLOBAL_START_DATE, end=GLOBAL_END_DATE, interval="1D")
                if len(vnindex_df) == 0:
                    raise ValueError("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu VNINDEX")
                vnindex_df.rename(columns={
                    "time": "Date", "open": "Open", "high": "High",
                    "low": "Low", "close": "Close", "volume": "Volume"
                }, inplace=True)
                vnindex_df["Date"] = pd.to_datetime(vnindex_df["Date"])
                vnindex_df.set_index("Date", inplace=True)
                vnindex_df.sort_index(inplace=True)
                df = calculate_relative_strength(df, vnindex_df)
            except Exception as e:
                print(f"‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng th·ªÉ t√≠nh RS cho {symbol} do l·ªói: {e}")
                # G√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu l·ªói t√≠nh RS
                df["RS"] = 1.0
                df["RS_Point"] = 0.0
                df["RS_Point_252"] = 0.0
                df["RS_SMA_10"] = 1.0
                df["RS_SMA_20"] = 1.0
                df["RS_SMA_50"] = 1.0
                df["RS_SMA_200"] = 1.0
                df["RS_Point_SMA_10"] = 0.0
                df["RS_Point_SMA_20"] = 0.0
                df["RS_Point_SMA_50"] = 0.0
                df["RS_Point_SMA_200"] = 0.0
                df["RS_Point_252_SMA_10"] = 0.0
                df["RS_Point_252_SMA_20"] = 0.0
                df["RS_Point_252_SMA_50"] = 0.0
                df["RS_Point_252_SMA_200"] = 0.0
        else:
            # N·∫øu l√† VNINDEX, g√°n c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh
            df["RS"] = 1.0
            df["RS_Point"] = 0.0
            df["RS_Point_252"] = 0.0
            df["RS_SMA_10"] = 1.0
            df["RS_SMA_20"] = 1.0
            df["RS_SMA_50"] = 1.0
            df["RS_SMA_200"] = 1.0
            df["RS_Point_SMA_10"] = 0.0
            df["RS_Point_SMA_20"] = 0.0
            df["RS_Point_SMA_50"] = 0.0
            df["RS_Point_SMA_200"] = 0.0
            df["RS_Point_252_SMA_10"] = 0.0
            df["RS_Point_252_SMA_20"] = 0.0
            df["RS_Point_252_SMA_50"] = 0.0
            df["RS_Point_252_SMA_200"] = 0.0

        df = df.dropna(subset=["Close", "SMA_10", "SMA_20", "SMA_50"], how="all")
        if len(df) < 20:
            print("‚ùå Kh√¥ng ƒë·ªß d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ ph√¢n t√≠ch")
            return {
                "signal": "L·ªñI", "score": 50,
                "current_price": df["Close"].iloc[-1] if len(df) > 0 else 0,
                "rsi_value": 50,
                "ma10": df["Close"].iloc[-1] if len(df) > 0 else 0,
                "ma20": df["Close"].iloc[-1] if len(df) > 0 else 0,
                "ma50": df["Close"].iloc[-1] if len(df) > 0 else 0,
                "ma200": df["Close"].iloc[-1] if len(df) > 0 else 0,
                "rs": 1.0, "rs_point": 0, "rs_point_252": 0.0,
                "recommendation": "KH√îNG X√ÅC ƒê·ªäNH",
                "rs_sma_10": None, "rs_sma_20": None, "rs_sma_50": None, "rs_sma_200": None,
                "rs_point_sma_10": None, "rs_point_sma_20": None, "rs_point_sma_50": None, "rs_point_sma_200": None,
                "rs_point_252_sma_10": None, "rs_point_252_sma_20": None,
                "rs_point_252_sma_50": None, "rs_point_252_sma_200": None,
                "forecast_dates": [], "forecast_prices": [], "forecast_plot_path": ""
            }

        # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n t√≠ch k·ªπ thu·∫≠t
        try:
            plot_configs = ["price_sma", "ichimoku", "rsi", "macd", "rs", "rs_point", "rs_point_252", "volume"]
            num_subplots = len(plot_configs)
            height_per_subplot = 3
            width = 18
            height = num_subplots * height_per_subplot
            plt.figure(figsize=(width, height), constrained_layout=True)
            grid = plt.GridSpec(num_subplots + 1, 1, hspace=0.3, height_ratios=[3] + [2] * (num_subplots - 1) + [2])

            # === Bi·ªÉu ƒë·ªì 1: Gi√° v√† c√°c ƒë∆∞·ªùng trung b√¨nh ===
            ax1 = plt.subplot(grid[0])
            plt.plot(df.index, df["Close"], label=f"Gi√° ƒë√≥ng c·ª≠a {df['Close'].iloc[-1]:,.0f}", color="black", linewidth=1.5)
            plt.plot(df.index, df["SMA_10"], label=f"SMA 10 {df['SMA_10'].iloc[-1]:,.0f}", color="blue", alpha=0.7)
            plt.plot(df.index, df["SMA_20"], label=f"SMA 20 {df['SMA_20'].iloc[-1]:,.0f}", color="orange", alpha=0.7)
            plt.plot(df.index, df["SMA_50"], label=f"SMA 50 {df['SMA_50'].iloc[-1]:,.0f}", color="green", alpha=0.7)
            plt.plot(df.index, df["SMA_200"], label=f"SMA 200 {df['SMA_200'].iloc[-1]:,.0f}", color="purple", alpha=0.7)
            plt.fill_between(df.index, df["BB_Upper"], df["BB_Lower"], color="gray", alpha=0.1, label="Bollinger Bands")
            plt.title(f"Bi·ªÉu ƒë·ªì gi√° {symbol}", fontsize=14, fontweight="bold")
            plt.ylabel("Gi√° (VND)", fontsize=12)
            plt.legend(loc="upper left")
            plt.grid(True, alpha=0.3)

            # === Bi·ªÉu ƒë·ªì 2: Ichimoku Cloud ===
            ax2 = plt.subplot(grid[1], sharex=ax1)
            for i in range(len(df)):
                if i < len(df) - 1:
                    date = mdates.date2num(df.index[i])
                    open_price = (df["Open"].iloc[i] if not pd.isna(df["Open"].iloc[i]) else df["Close"].iloc[i])
                    high_price = (df["High"].iloc[i] if not pd.isna(df["High"].iloc[i]) else df["Close"].iloc[i])
                    low_price = (df["Low"].iloc[i] if not pd.isna(df["Low"].iloc[i]) else df["Close"].iloc[i])
                    close_price = df["Close"].iloc[i]
                    color = "green" if close_price >= open_price else "red"
                    ax2.plot([date, date], [low_price, high_price], color=color, linewidth=1)
                    ax2.plot([date], [open_price], marker="_", color=color, markersize=4)
                    ax2.plot([date], [close_price], marker="_", color=color, markersize=4)
            plt.plot(df.index, df["SMA_20"], label=f"Kijun-sen {df['SMA_20'].iloc[-1]:.0f}", color="red", linewidth=1.5)
            plt.plot(df.index, df["SMA_50"], label=f"Tenkan-sen {df['SMA_50'].iloc[-1]:.0f}", color="blue", linewidth=1.5)
            plt.title("Ichimoku Cloud", fontsize=12)
            plt.ylabel("Gi√° (VND)", fontsize=10)
            plt.legend(fontsize=8, loc="upper left")
            plt.grid(True, alpha=0.3)

            # === Bi·ªÉu ƒë·ªì 3: RSI ===
            ax3 = plt.subplot(grid[2], sharex=ax1)
            plt.plot(df.index, df["RSI"], label=f"RSI {df['RSI'].iloc[-1]:.2f}", color="purple", linewidth=1.5)
            plt.axhline(70, color="red", linestyle="--", linewidth=0.8, label="Qu√° mua")
            plt.axhline(30, color="green", linestyle="--", linewidth=0.8, label="Qu√° b√°n")
            plt.axhline(50, color="black", linestyle="-", linewidth=0.5)
            plt.fill_between(df.index, df["RSI"], 70, where=(df["RSI"] > 70), color="red", alpha=0.3)
            plt.fill_between(df.index, df["RSI"], 30, where=(df["RSI"] < 30), color="green", alpha=0.3)
            plt.title("RSI", fontsize=12)
            plt.ylabel("RSI", fontsize=10)
            plt.ylim(0, 100)
            plt.legend(fontsize=8, loc="upper left")
            plt.grid(True, alpha=0.3)

            # === Bi·ªÉu ƒë·ªì 4: MACD ===
            ax4 = plt.subplot(grid[3], sharex=ax1)
            plt.plot(df.index, df["MACD"], label=f"MACD {df['MACD'].iloc[-1]:.2f}", color="blue", linewidth=1.5)
            plt.plot(df.index, df["MACD_Signal"], label=f"Signal {df['MACD_Signal'].iloc[-1]:.2f}", color="red", linewidth=1.5)
            plt.bar(df.index, df["MACD_Hist"], label=f"Hist {df['MACD_Hist'].iloc[-1]:.2f}",
                    color=np.where(df["MACD_Hist"] > 0, "green", "red"), alpha=0.6)
            plt.axhline(0, color="black", linestyle="-", linewidth=0.8)
            plt.title("MACD", fontsize=12)
            plt.ylabel("MACD", fontsize=10)
            plt.legend(fontsize=8, loc="upper left")
            plt.grid(True, alpha=0.3)

            # === Bi·ªÉu ƒë·ªì 5: RS (Relative Strength) ===
            ax5 = plt.subplot(grid[4], sharex=ax1)
            plt.plot(df.index, df["RS"], label=f"RS {df['RS'].iloc[-1]:.4f}", color="blue", linewidth=1.5)
            plt.plot(df.index, df["RS_SMA_10"], label=f"RS SMA 10 {df['RS_SMA_10'].iloc[-1]:.4f}", color="orange", alpha=0.7)
            plt.plot(df.index, df["RS_SMA_20"], label=f"RS SMA 20 {df['RS_SMA_20'].iloc[-1]:.4f}", color="green", alpha=0.7)
            plt.plot(df.index, df["RS_SMA_50"], label=f"RS SMA 50 {df['RS_SMA_50'].iloc[-1]:.4f}", color="red", alpha=0.7)
            plt.plot(df.index, df["RS_SMA_200"], label=f"RS SMA 200 {df['RS_SMA_200'].iloc[-1]:.4f}", color="purple", alpha=0.7)
            plt.axhline(1, color="black", linestyle="-", linewidth=0.8)
            plt.title("RS (Relative Strength vs VNINDEX)", fontsize=12)
            plt.ylabel("RS", fontsize=10)
            plt.grid(True, alpha=0.3)
            plt.legend(fontsize=7, loc="upper left")

            # === Bi·ªÉu ƒë·ªì 6: RS_Point ===
            ax6 = plt.subplot(grid[5], sharex=ax1)
            plt.plot(df.index, df["RS_Point"], label=f"RS_Point {df['RS_Point'].iloc[-1]:.2f}", color="darkblue", linewidth=1.5)
            plt.plot(df.index, df["RS_Point_SMA_10"], label=f"RS_Point SMA 10 {df['RS_Point_SMA_10'].iloc[-1]:.2f}",
                     color="blue", alpha=0.7, linewidth=1)
            plt.plot(df.index, df["RS_Point_SMA_20"], label=f"RS_Point SMA 20 {df['RS_Point_SMA_20'].iloc[-1]:.2f}",
                     color="orange", alpha=0.7, linewidth=1)
            plt.plot(df.index, df["RS_Point_SMA_50"], label=f"RS_Point SMA 50 {df['RS_Point_SMA_50'].iloc[-1]:.2f}",
                     color="green", alpha=0.7, linewidth=1)
            plt.plot(df.index, df["RS_Point_SMA_200"], label=f"RS_Point SMA 200 {df['RS_Point_SMA_200'].iloc[-1]:.2f}",
                     color="purple", alpha=0.7, linewidth=1)
            plt.axhline(0, color="black", linestyle="-", linewidth=0.8)
            plt.fill_between(df.index, df["RS_Point"], 0, where=(df["RS_Point"] > 0), color="green", alpha=0.2)
            plt.fill_between(df.index, df["RS_Point"], 0, where=(df["RS_Point"] < 0), color="red", alpha=0.2)
            plt.title("RS_Point", fontsize=12)
            plt.ylabel("RS_Point", fontsize=10)
            plt.grid(True, alpha=0.3)
            plt.legend(fontsize=7, loc="upper left")

            # === Bi·ªÉu ƒë·ªì 7: RS_Point_252 ===
            ax7 = plt.subplot(grid[6], sharex=ax1)
            plt.plot(df.index, df["RS_Point_252"], label=f"RS_Point_252 {df['RS_Point_252'].iloc[-1]:.2f}", color="darkgreen",
                     linewidth=1.5)
            plt.plot(df.index, df["RS_Point_252_SMA_10"], label=f"RS_Point_252 SMA 10 {df['RS_Point_252_SMA_10'].iloc[-1]:.2f}",
                     color="blue", alpha=0.7, linewidth=1)
            plt.plot(df.index, df["RS_Point_252_SMA_20"], label=f"RS_Point_252 SMA 20 {df['RS_Point_252_SMA_20'].iloc[-1]:.2f}",
                     color="orange", alpha=0.7, linewidth=1)
            plt.plot(df.index, df["RS_Point_252_SMA_50"], label=f"RS_Point_252 SMA 50 {df['RS_Point_252_SMA_50'].iloc[-1]:.2f}",
                     color="green", alpha=0.7, linewidth=1)
            plt.plot(df.index, df["RS_Point_252_SMA_200"], label=f"RS_Point_252 SMA 200 {df['RS_Point_252_SMA_200'].iloc[-1]:.2f}",
                     color="purple", alpha=0.7, linewidth=1)
            plt.axhline(0, color="black", linestyle="-", linewidth=0.8)
            plt.fill_between(df.index, df["RS_Point_252"], 0, where=(df["RS_Point_252"] > 0), color="green", alpha=0.2)
            plt.fill_between(df.index, df["RS_Point_252"], 0, where=(df["RS_Point_252"] < 0), color="red", alpha=0.2)
            plt.title("RS_Point_252", fontsize=12)
            plt.ylabel("RS_Point_252", fontsize=10)
            plt.grid(True, alpha=0.3)
            plt.legend(fontsize=7, loc="upper left")

            # === Bi·ªÉu ƒë·ªì 8: Kh·ªëi l∆∞·ª£ng ===
            ax8 = plt.subplot(grid[7], sharex=ax1)
            if show_volume and "Volume" in df.columns:
                volume_sma_plotted = False
                if ("Volume_MA" in df.columns and not df["Volume_MA"].isna().all()):
                    plt.plot(df.index, df["Volume_MA"], label=f"Vol SMA 20 {df['Volume_MA'].iloc[-1]:,.0f}",
                             color="orange", alpha=0.8, linewidth=1.5)
                    volume_sma_plotted = True
                colors = np.where(df["Close"] > df["Open"], "green", "red")
                plt.bar(df.index, df["Volume"], color=colors, alpha=0.7, label="Volume" if not volume_sma_plotted else None)
                handles, labels = ax8.get_legend_handles_labels()
                if handles:
                    by_label = dict(zip(labels, handles))
                    plt.legend(by_label.values(), by_label.keys(), loc="upper left")
                else:
                    plt.legend(fontsize=7, loc="upper left")
                plt.title("Volume & Vol SMA", fontsize=12)
                plt.ylabel("Kh·ªëi l∆∞·ª£ng", fontsize=10)
                plt.grid(True, alpha=0.3)
            else:
                plt.title("Kh·ªëi l∆∞·ª£ng giao d·ªãch", fontsize=12)
                plt.ylabel("Kh·ªëi l∆∞·ª£ng", fontsize=10)
                plt.grid(True, alpha=0.3)

            plt.suptitle(f"Ph√¢n t√≠ch k·ªπ thu·∫≠t {symbol} - Gi√° v√† Ch·ªâ b√°o", fontsize=16, fontweight="bold", y=0.98)
            technical_plot_path = f"vnstocks_data/{symbol}_analysis.png"
            plt.savefig(technical_plot_path)
            plt.close()
            print(f"‚úÖ ƒê√£ l∆∞u bi·ªÉu ƒë·ªì ph√¢n t√≠ch v√†o file '{technical_plot_path}'")

        except Exception as e:
            print(f"‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng th·ªÉ v·∫Ω bi·ªÉu ƒë·ªì cho {symbol}: {e}")
            traceback.print_exc()
            technical_plot_path = ""

        # T·∫°o t√≠n hi·ªáu giao d·ªãch
        try:
            last_row = df.iloc[-1]
            current_price = last_row["Close"]
            rsi_value = last_row["RSI"] if not pd.isna(last_row["RSI"]) else 50
            ma10_value = (last_row["SMA_10"] if not pd.isna(last_row["SMA_10"]) else current_price)
            ma20_value = (last_row["SMA_20"] if not pd.isna(last_row["SMA_20"]) else current_price)
            ma50_value = (last_row["SMA_50"] if not pd.isna(last_row["SMA_50"]) else current_price)
            ma200_value = (last_row["SMA_200"] if not pd.isna(last_row["SMA_200"]) else current_price)
            rs_value = last_row["RS"] if not pd.isna(last_row["RS"]) else 1.0
            rs_point_value = last_row["RS_Point"] if not pd.isna(last_row["RS_Point"]) else 0.0
            rs_point_252_value = last_row["RS_Point_252"] if not pd.isna(last_row["RS_Point_252"]) else 0.0

            macd_value = last_row["MACD"] if not pd.isna(last_row["MACD"]) else 0
            macd_signal = last_row["MACD_Signal"] if not pd.isna(last_row["MACD_Signal"]) else 0
            macd_hist = last_row["MACD_Hist"] if not pd.isna(last_row["MACD_Hist"]) else 0
            bb_upper = last_row["BB_Upper"] if not pd.isna(last_row["BB_Upper"]) else current_price
            bb_lower = last_row["BB_Lower"] if not pd.isna(last_row["BB_Lower"]) else current_price
            volume_ma = last_row["Volume_MA"] if not pd.isna(last_row["Volume_MA"]) else 0

            tenkan_sen = last_row["SMA_50"] if not pd.isna(last_row["SMA_50"]) else np.nan
            kijun_sen = last_row["SMA_20"] if not pd.isna(last_row["SMA_20"]) else np.nan
            senkou_span_a = (tenkan_sen + kijun_sen) / 2 if not (pd.isna(tenkan_sen) or pd.isna(kijun_sen)) else np.nan
            senkou_span_b = df["Close"].rolling(window=52).mean().iloc[-26] if len(df) >= 78 else np.nan
            chikou_span = df["Close"].shift(-26).iloc[-1] if len(df) > 26 else np.nan

            # T√≠nh ƒëi·ªÉm t·ªïng h·ª£p
            score = 50 # ƒêi·ªÉm c∆° b·∫£n
            # 1. RSI - 15 ƒëi·ªÉm
            rsi_score = 0
            if rsi_value < 30: rsi_score += 15
            elif rsi_value < 50: rsi_score += 7
            elif rsi_value > 70: rsi_score -= 15
            elif rsi_value > 50: rsi_score -= 7
            score += rsi_score
            # 2. MA - 20 ƒëi·ªÉm
            ma_score = 0
            if current_price > ma10_value: ma_score += 2
            if current_price > ma20_value: ma_score += 3
            if current_price > ma50_value: ma_score += 5
            if current_price > ma200_value: ma_score += 10
            if ma10_value > ma20_value > ma50_value > ma200_value: ma_score += 5
            elif ma10_value < ma20_value < ma50_value < ma200_value: ma_score -= 5
            score += ma_score
            # 3. MACD - 10 ƒëi·ªÉm
            macd_score = 0
            if macd_value > macd_signal and macd_hist > 0: macd_score += 10
            elif macd_value < macd_signal and macd_hist < 0: macd_score -= 10
            score += macd_score
            # 4. Bollinger Bands - 10 ƒëi·ªÉm
            bb_score = 0
            if current_price < bb_lower: bb_score += 10
            elif current_price > bb_upper: bb_score -= 10
            score += bb_score
            # 5. Volume - 5 ƒëi·ªÉm
            volume_score = 0
            if "Volume" in last_row and not pd.isna(last_row["Volume"]) and last_row["Volume"] > volume_ma: volume_score += 5
            score += volume_score
            # 6. RS - 10 ƒëi·ªÉm
            if symbol.upper() != "VNINDEX":
                rs_score = 0
                if rs_value > last_row.get("RS_SMA_10", rs_value): rs_score += 2
                if rs_value > last_row.get("RS_SMA_20", rs_value): rs_score += 3
                if rs_value > last_row.get("RS_SMA_50", rs_value): rs_score += 5
                score += rs_score
            # 7. RS_Point - 10 ƒëi·ªÉm
            if symbol.upper() != "VNINDEX":
                rs_point_score = 0
                if rs_point_value > last_row.get("RS_Point_SMA_10", 0): rs_point_score += 2
                if rs_point_value > last_row.get("RS_Point_SMA_20", 0): rs_point_score += 3
                if rs_point_value > last_row.get("RS_Point_SMA_50", 0): rs_point_score += 5
                score += rs_point_score
            # 8. RS_Point_252 - 10 ƒëi·ªÉm
            if symbol.upper() != "VNINDEX":
                rs_point_252_score = 0
                if rs_point_252_value > last_row.get("RS_Point_252_SMA_10", 0): rs_point_252_score += 2
                if rs_point_252_value > last_row.get("RS_Point_252_SMA_20", 0): rs_point_252_score += 3
                if rs_point_252_value > last_row.get("RS_Point_252_SMA_50", 0): rs_point_252_score += 5
                score += rs_point_252_score
            # 9. Ichimoku Cloud - 15 ƒëi·ªÉm
            ichimoku_score = 0
            try:
                if not (pd.isna(tenkan_sen) or pd.isna(kijun_sen) or pd.isna(senkou_span_a) or pd.isna(senkou_span_b)):
                    if current_price > max(senkou_span_a, senkou_span_b) and tenkan_sen > kijun_sen: ichimoku_score += 15
                    elif current_price > max(senkou_span_a, senkou_span_b): ichimoku_score += 10
                    elif current_price < min(senkou_span_a, senkou_span_b) and tenkan_sen < kijun_sen: ichimoku_score -= 15
                    elif current_price < min(senkou_span_a, senkou_span_b): ichimoku_score -= 10
                    if tenkan_sen > kijun_sen: ichimoku_score += 5
                    elif tenkan_sen < kijun_sen: ichimoku_score -= 5
                    if kijun_sen > max(senkou_span_a, senkou_span_b): ichimoku_score += 5
                    elif kijun_sen < min(senkou_span_a, senkou_span_b): ichimoku_score -= 5
            except Exception as e:
                print(f"‚ö†Ô∏è C·∫£nh b√°o: L·ªói khi t√≠nh ƒëi·ªÉm Ichimoku: {e}")
            score += ichimoku_score
            score = np.clip(score, 0, 100)

            # X√°c ƒë·ªãnh t√≠n hi·ªáu v√† ƒë·ªÅ xu·∫•t
            signal = "TRUNG L·∫¨P"
            recommendation = "GI·ªÆ"
            if score >= 80:
                signal = "MUA M·∫†NH"
                recommendation = "MUA M·∫†NH"
            elif score >= 65:
                signal = "MUA"
                recommendation = "MUA"
            elif score <= 20:
                signal = "B√ÅN M·∫†NH"
                recommendation = "B√ÅN M·∫†NH"
            elif score <= 35:
                signal = "B√ÅN"
                recommendation = "B√ÅN"

            # In ra t√≠n hi·ªáu cu·ªëi c√πng
            analysis_date = df.index[-1].strftime("%d/%m/%Y")
            print(f"\nüìä T√çN HI·ªÜU GIAO D·ªäCH CU·ªêI C√ôNG CHO {symbol} ({analysis_date}):")
            print(f"  - Gi√° hi·ªán t·∫°i: {current_price:,.0f} VND")
            print(f"  - ƒê∆∞·ªùng trung b√¨nh:")
            print(f"    * MA10: {ma10_value:,.0f} | MA20: {ma20_value:,.0f} | MA50: {ma50_value:,.0f} | MA200: {ma200_value:,.0f}")
            print(f"  - Ch·ªâ b√°o dao ƒë·ªông:")
            print(f"    * RSI (14): {rsi_value:.2f}")
            print(f"    * MACD: {macd_value:.2f} | Signal: {macd_signal:.2f} | Histogram: {macd_hist:.2f}")
            print(f"    * Bollinger Bands: Tr√™n: {bb_upper:,.0f} | D∆∞·ªõi: {bb_lower:,.0f}")
            if symbol.upper() != "VNINDEX":
                 print(f"  - S·ª©c m·∫°nh t∆∞∆°ng ƒë·ªëi (RS):")
                 print(f"    * RS: {rs_value:.4f}")
                 print(f"    * RS_Point: {rs_point_value:.2f}")
                 print(f"    * RS_Point_252: {rs_point_252_value:.2f}")
            try:
                print(f"  - M√¥ h√¨nh Ichimoku:")
                print(f"    * Tenkan-sen (Chuy·ªÉn ƒë·ªïi): {tenkan_sen:.0f}")
                print(f"    * Kijun-sen (C∆° s·ªü): {kijun_sen:.0f}")
                print(f"    * Senkou Span A (Leading Span A): {senkou_span_a:.0f}")
                print(f"    * Senkou Span B (Leading Span B): {senkou_span_b:.0f}")
                print(f"    * Chikou Span (Tr·ªÖ): {chikou_span:.0f}")
                print(f"    * ƒêi·ªÉm Ichimoku: ~{ichimoku_score:.1f}")
            except: print(f"  - Ichimoku: Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu.")
            print(f"  - Kh·ªëi l∆∞·ª£ng:")
            print(f"    * Kh·ªëi l∆∞·ª£ng hi·ªán t·∫°i: {last_row.get('Volume', 'N/A')}")
            print(f"    * MA Kh·ªëi l∆∞·ª£ng (20): {volume_ma:,.0f}")
            print(f"  üéØ ƒê·ªÄ XU·∫§T CU·ªêI C√ôNG: {recommendation}")
            print(f"  üìä T·ªîNG ƒêI·ªÇM PH√ÇN T√çCH: {score:.1f}/100")
            print(f"  üìà T√çN HI·ªÜU: {signal}")

            # --- Hu·∫•n luy·ªán AI v√† d·ª± b√°o gi√° ---
            forecast_dates_list, forecast_prices_list, forecast_plot_path = train_lstm_model(df, symbol)

            return {
                "signal": signal, "score": float(score), "current_price": float(current_price),
                "rsi_value": float(rsi_value),
                "ma10": float(ma10_value), "ma20": float(ma20_value), "ma50": float(ma50_value),
                "ma200": float(ma200_value),
                "rs": float(rs_value), "rs_point": float(rs_point_value),
                "rs_point_252": float(rs_point_252_value),
                "recommendation": recommendation,
                "open": safe_float(last_row.get("Open")), "high": safe_float(last_row.get("High")),
                "low": safe_float(last_row.get("Low")), "volume": safe_float(last_row.get("Volume")),
                "macd": safe_float(macd_value), "macd_signal": safe_float(macd_signal), "macd_hist": safe_float(macd_hist),
                "bb_upper": safe_float(bb_upper), "bb_lower": safe_float(bb_lower),
                "volume_ma": safe_float(last_row.get("Volume_MA")),
                "ichimoku_tenkan_sen": safe_float(tenkan_sen), "ichimoku_kijun_sen": safe_float(kijun_sen),
                "ichimoku_senkou_span_a": safe_float(senkou_span_a),
                "ichimoku_senkou_span_b": safe_float(senkou_span_b),
                "ichimoku_chikou_span": safe_float(chikou_span),
                "rs_sma_10": safe_float(last_row.get("RS_SMA_10")) if symbol.upper() != "VNINDEX" else None,
                "rs_sma_20": safe_float(last_row.get("RS_SMA_20")) if symbol.upper() != "VNINDEX" else None,
                "rs_sma_50": safe_float(last_row.get("RS_SMA_50")) if symbol.upper() != "VNINDEX" else None,
                "rs_sma_200": safe_float(last_row.get("RS_SMA_200")) if symbol.upper() != "VNINDEX" else None,
                "rs_point_sma_10": safe_float(last_row.get("RS_Point_SMA_10")) if symbol.upper() != "VNINDEX" else None,
                "rs_point_sma_20": safe_float(last_row.get("RS_Point_SMA_20")) if symbol.upper() != "VNINDEX" else None,
                "rs_point_sma_50": safe_float(last_row.get("RS_Point_SMA_50")) if symbol.upper() != "VNINDEX" else None,
                "rs_point_sma_200": safe_float(last_row.get("RS_Point_SMA_200")) if symbol.upper() != "VNINDEX" else None,
                "rs_point_252_sma_10": safe_float(last_row.get("RS_Point_252_SMA_10")) if symbol.upper() != "VNINDEX" else None,
                "rs_point_252_sma_20": safe_float(last_row.get("RS_Point_252_SMA_20")) if symbol.upper() != "VNINDEX" else None,
                "rs_point_252_sma_50": safe_float(last_row.get("RS_Point_252_SMA_50")) if symbol.upper() != "VNINDEX" else None,
                "rs_point_252_sma_200": safe_float(last_row.get("RS_Point_252_SMA_200")) if symbol.upper() != "VNINDEX" else None,
                "forecast_dates": forecast_dates_list,
                "forecast_prices": forecast_prices_list,
                "forecast_plot_path": forecast_plot_path
            }

        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫°o t√≠n hi·ªáu cho {symbol}: {str(e)}")
            traceback.print_exc()
            return {
                "signal": "L·ªñI", "score": 50,
                "current_price": df["Close"].iloc[-1] if len(df) > 0 else 0,
                "rsi_value": 50,
                "ma10": df["Close"].iloc[-1] if len(df) > 0 else 0,
                "ma20": df["Close"].iloc[-1] if len(df) > 0 else 0,
                "ma50": df["Close"].iloc[-1] if len(df) > 0 else 0,
                "ma200": df["Close"].iloc[-1] if len(df) > 0 else 0,
                "rs": 1.0, "rs_point": 0, "rs_point_252": 0.0,
                "recommendation": "KH√îNG X√ÅC ƒê·ªäNH",
                "open": None, "high": None, "low": None, "volume": None,
                "macd": None, "macd_signal": None, "macd_hist": None,
                "bb_upper": None, "bb_lower": None,
                "volume_ma": None,
                "ichimoku_tenkan_sen": None, "ichimoku_kijun_sen": None,
                "ichimoku_senkou_span_a": None, "ichimoku_senkou_span_b": None, "ichimoku_chikou_span": None,
                "rs_sma_10": None, "rs_sma_20": None, "rs_sma_50": None, "rs_sma_200": None,
                "rs_point_sma_10": None, "rs_point_sma_20": None, "rs_point_sma_50": None, "rs_point_sma_200": None,
                "rs_point_252_sma_10": None, "rs_point_252_sma_20": None,
                "rs_point_252_sma_50": None, "rs_point_252_sma_200": None,
                "forecast_dates": [], "forecast_prices": [], "forecast_plot_path": ""
            }

    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng khi ph√¢n t√≠ch {symbol}: {str(e)}")
        traceback.print_exc()
        return {
            "signal": "L·ªñI", "score": 50, "current_price": 0, "rsi_value": 0,
            "ma10": 0, "ma20": 0, "ma50": 0, "ma200": 0, "rs": 1.0, "rs_point": 0,
            "rs_point_252": 0.0,
            "recommendation": "KH√îNG X√ÅC ƒê·ªäNH",
            "open": None, "high": None, "low": None, "volume": None,
            "macd": None, "macd_signal": None, "macd_hist": None,
            "bb_upper": None, "bb_lower": None,
            "volume_ma": None,
            "ichimoku_tenkan_sen": None, "ichimoku_kijun_sen": None,
            "ichimoku_senkou_span_a": None, "ichimoku_senkou_span_b": None, "ichimoku_chikou_span": None,
            "rs_sma_10": None, "rs_sma_20": None, "rs_sma_50": None, "rs_sma_200": None,
            "rs_point_sma_10": None, "rs_point_sma_20": None, "rs_point_sma_50": None, "rs_point_sma_200": None,
            "rs_point_252_sma_10": None, "rs_point_252_sma_20": None,
            "rs_point_252_sma_50": None, "rs_point_252_sma_200": None,
            "forecast_dates": [], "forecast_prices": [], "forecast_plot_path": ""
        }

# --- Ph√¢n t√≠ch b·∫±ng Google Gemini ---
def analyze_with_gemini(symbol, trading_signal, financial_data):
    """Ph√¢n t√≠ch m√£ ch·ª©ng kho√°n b·∫±ng Google Gemini."""
    try:
        # L·∫•y c√°c gi√° tr·ªã c·∫ßn thi·∫øt t·ª´ trading_signal
        rs_val = trading_signal.get("rs", 1.0)
        rs_sma10_val = safe_format(trading_signal.get("rs_sma_10"), ".4f")
        rs_sma20_val = safe_format(trading_signal.get("rs_sma_20"), ".4f")
        rs_sma50_val = safe_format(trading_signal.get("rs_sma_50"), ".4f")
        rs_sma200_val = safe_format(trading_signal.get("rs_sma_200"), ".4f")

        rs_point_val = trading_signal["rs_point"]
        rs_point_sma10_val = safe_format(trading_signal.get("rs_point_sma_10"), ".2f")
        rs_point_sma20_val = safe_format(trading_signal.get("rs_point_sma_20"), ".2f")
        rs_point_sma50_val = safe_format(trading_signal.get("rs_point_sma_50"), ".2f")
        rs_point_sma200_val = safe_format(trading_signal.get("rs_point_sma_200"), ".2f")

        rs_point_252_val = trading_signal.get("rs_point_252", 0.0)
        rs_point_252_sma10_val = safe_format(trading_signal.get("rs_point_252_sma_10"), ".2f")
        rs_point_252_sma20_val = safe_format(trading_signal.get("rs_point_252_sma_20"), ".2f")
        rs_point_252_sma50_val = safe_format(trading_signal.get("rs_point_252_sma_50"), ".2f")
        rs_point_252_sma200_val = safe_format(trading_signal.get("rs_point_252_sma_200"), ".2f")

        tenkan_val = safe_format(trading_signal.get("ichimoku_tenkan_sen"))
        kijun_val = safe_format(trading_signal.get("ichimoku_kijun_sen"))
        senkou_a_val = safe_format(trading_signal.get("ichimoku_senkou_span_a"))
        senkou_b_val = safe_format(trading_signal.get("ichimoku_senkou_span_b"))
        chikou_val = safe_format(trading_signal.get("ichimoku_chikou_span"))

        # L·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh ph√¢n t√≠ch k·ªπ thu·∫≠t v√† d·ª± b√°o
        technical_plot_path = trading_signal.get("forecast_plot_path", "") # S·ª≠ d·ª•ng forecast_plot_path v√¨ n√≥ ƒë∆∞·ª£c l∆∞u cu·ªëi c√πng
        forecast_plot_path = trading_signal.get("forecast_plot_path", "")

        prompt = f"""B·∫°n l√† chuy√™n gia ph√¢n t√≠ch ch·ª©ng kho√°n Vi·ªát Nam. Ph√¢n t√≠ch {symbol}:
1. K·ªπ thu·∫≠t:
- Gi√°: {trading_signal['current_price']:,.2f}
- RSI: {trading_signal['rsi_value']:.2f}
- MA10: {trading_signal['ma10']:,.2f}
- MA20: {trading_signal['ma20']:,.2f}
- MA50: {trading_signal['ma50']:,.2f}
- MA200: {trading_signal['ma200']:,.2f}
- BB: {safe_format(trading_signal.get('bb_upper'))} / {safe_format(trading_signal.get('bb_lower'))}"""
        if symbol.upper() != "VNINDEX":
            prompt += f"- RS (so v·ªõi VNINDEX): {rs_val:.4f} (SMA10: {safe_format(rs_sma10_val, '.4f')}) (SMA20: {safe_format(rs_sma20_val, '.4f')}) (SMA50: {safe_format(rs_sma50_val, '.4f')}) (SMA200: {safe_format(rs_sma200_val, '.4f')})"
            prompt += f"- RS_Point: {rs_point_val:.2f} (SMA10: {rs_point_sma10_val}) (SMA20: {rs_point_sma20_val}) (SMA50: {rs_point_sma50_val}) (SMA200: {rs_point_sma200_val})"
            prompt += f"- RS_Point_252: {rs_point_252_val:.2f} (SMA10: {rs_point_252_sma10_val}) (SMA20: {rs_point_252_sma20_val}) (SMA50: {rs_point_252_sma50_val}) (SMA200: {rs_point_252_sma200_val})"
            prompt += f"- Ichimoku: T:{tenkan_val}| K:{kijun_val}| A:{senkou_a_val}| B:{senkou_b_val}| C:{chikou_val}"
        if financial_data is not None and not financial_data.empty:
            prompt += f"2. T√†i ch√≠nh :\n{financial_data.to_string(index=False)}"
        else:
            prompt += "2. T√†i ch√≠nh : Kh√¥ng c√≥ d·ªØ li·ªáu t√†i ch√≠nh."

        prompt += """Y√™u c·∫ßu:
- Cho t√¥i bi·∫øt n√≥ ƒëang m·∫´u h√¨nh trong ph√¢n t√≠ch k·ªπ thu·∫≠t.
- Ph√¢n t√≠ch ng·∫Øn g·ªçn, chuy√™n nghi·ªáp.
- K·∫øt lu·∫≠n r√µ r√†ng: MUA M·∫†NH/MUA/GI·ªÆ/B√ÅN/B√ÅN M·∫†NH.
- Ph√¢n t√≠ch d·ª±a tr√™n k·ªπ thu·∫≠t v√† ph√¢n t√≠ch t√†i ch√≠nh."""

        # T·∫°o danh s√°ch files ƒë·ªÉ g·ª≠i cho Gemini
        files = []
        if technical_plot_path and os.path.exists(technical_plot_path):
            # Ki·ªÉm tra lo·∫°i file ƒë·ªÉ ƒë·∫£m b·∫£o Gemini h·ªó tr·ª£
            if technical_plot_path.lower().endswith(('.png', '.jpg', '.jpeg')):
                files.append(technical_plot_path)
                print(f"üìÅ ƒê√≠nh k√®m ·∫£nh ph√¢n t√≠ch k·ªπ thu·∫≠t: {technical_plot_path}")
            else: print(f"‚ö†Ô∏è Gemini kh√¥ng h·ªó tr·ª£ file: {technical_plot_path}. B·ªè qua.")
        if forecast_plot_path and os.path.exists(forecast_plot_path) and forecast_plot_path != technical_plot_path:
            if forecast_plot_path.lower().endswith(('.png', '.jpg', '.jpeg')):
                files.append(forecast_plot_path)
                print(f"üìÅ ƒê√≠nh k√®m ·∫£nh d·ª± b√°o gi√°: {forecast_plot_path}")
            else: print(f"‚ö†Ô∏è Gemini kh√¥ng h·ªó tr·ª£ file: {forecast_plot_path}. B·ªè qua.")

        # G·ª≠i prompt v√† files (·∫£nh) cho Gemini
        model = genai.GenerativeModel("gemini-1.5-flash")
        if files:
            uploaded_files = []
            for file_path in files:
                try:
                    uploaded_file = genai.upload_file(path=file_path)
                    uploaded_files.append(uploaded_file)
                    print(f"‚úÖ ƒê√£ t·∫£i l√™n ·∫£nh cho Gemini: {file_path}")
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói khi t·∫£i ·∫£nh {file_path} l√™n Gemini: {e}. B·ªè qua.")
            if uploaded_files:
                full_prompt = [prompt] + uploaded_files
                response = model.generate_content(full_prompt)
            else:
                print("‚ö†Ô∏è Kh√¥ng c√≥ ·∫£nh h·ª£p l·ªá ƒë·ªÉ ƒë√≠nh k√®m.")
                response = model.generate_content(prompt)
        else:
            print("‚ö†Ô∏è Kh√¥ng c√≥ ·∫£nh ƒë·ªÉ ƒë√≠nh k√®m.")
            response = model.generate_content(prompt)

        if response and response.text:
            return response.text.strip()
        else:
            return "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Google Gemini."

    except Exception as e:
        import traceback
        print(f"‚ùå L·ªói khi ph√¢n t√≠ch b·∫±ng Google Gemini cho {symbol}: {str(e)}")
        print("Chi ti·∫øt l·ªói:")
        traceback.print_exc()
        return "Kh√¥ng th·ªÉ t·∫°o ph√¢n t√≠ch b·∫±ng Google Gemini t·∫°i th·ªùi ƒëi·ªÉm n√†y."

# --- Ph√¢n t√≠ch m·ªôt m√£ c·ªï phi·∫øu ---
def analyze_stock(symbol):
    """Ph√¢n t√≠ch to√†n di·ªán m·ªôt m√£ ch·ª©ng kho√°n."""
    print(f"\n{'=' * 60}")
    print(f"PH√ÇN T√çCH TO√ÄN DI·ªÜN M√É {symbol}")
    print(f"{'=' * 60}")
    df = get_stock_data(symbol)
    if df is None or df.empty:
        print(f"‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch m√£ {symbol} do thi·∫øu d·ªØ li·ªáu")
        return None
    financial_data = get_financial_data(symbol)
    df_processed = preprocess_stock_data(df)
    if df_processed is None or df_processed.empty:
        print(f"‚ùå Kh√¥ng th·ªÉ ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu cho m√£ {symbol}")
        return None
    if len(df_processed) < 100:
        print(f"‚ùå D·ªØ li·ªáu cho m√£ {symbol} qu√° √≠t ƒë·ªÉ ph√¢n t√≠ch ({len(df_processed)} ƒëi·ªÉm)")
        return None
    print(f"üìà ƒêang ph√¢n t√≠ch k·ªπ thu·∫≠t cho m√£ {symbol}...")
    trading_signal = plot_stock_analysis(symbol, df_processed)
    print(f"ü§ñ ƒêang ph√¢n t√≠ch b·∫±ng Google Gemini ...")
    gemini_analysis = analyze_with_gemini(symbol, trading_signal, financial_data)
    print(f"\n{'='*20} K·∫æT QU·∫¢ PH√ÇN T√çCH CHO M√É {symbol} {'='*20}")
    print(f"üí∞ Gi√° hi·ªán t·∫°i: {trading_signal['current_price']:,.2f} VND")
    print(f"üìà T√≠n hi·ªáu: {trading_signal['signal']}")
    print(f"üéØ ƒê·ªÅ xu·∫•t: {trading_signal['recommendation']}")
    print(f"üìä ƒêi·ªÉm ph√¢n t√≠ch: {trading_signal['score']:.2f}/100")
    if symbol.upper() != "VNINDEX":
        print(f"üìä RS (so v·ªõi VNINDEX): {trading_signal['rs']:.4f}")
        print(f"üìä RS_Point: {trading_signal['rs_point']:.2f}")
        print(f"üìä RS_Point_252: {trading_signal['rs_point_252']:.2f}")
    print(f"\n--- PH√ÇN T√çCH T·ªîNG H·ª¢P T·ª™ GOOGLE GEMINI ---")
    print(gemini_analysis)
    print(f"{'='*60}\n")
    report = {
        "symbol": symbol, "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "current_price": safe_float(trading_signal.get("current_price")), "signal": trading_signal.get("signal"),
        "recommendation": trading_signal.get("recommendation"), "score": safe_float(trading_signal.get("score")),
        "rsi_value": safe_float(trading_signal.get("rsi_value")), "ma10": safe_float(trading_signal.get("ma10")),
        "ma20": safe_float(trading_signal.get("ma20")), "ma50": safe_float(trading_signal.get("ma50")),
        "ma200": safe_float(trading_signal.get("ma200")),
        "rs": safe_float(trading_signal.get("rs")) if symbol.upper() != "VNINDEX" else None,
        "rs_point": safe_float(trading_signal.get("rs_point")) if symbol.upper() != "VNINDEX" else None,
        "rs_point_252": safe_float(trading_signal.get("rs_point_252")) if symbol.upper() != "VNINDEX" else None,
        "forecast": list(zip(trading_signal.get("forecast_dates", []), trading_signal.get("forecast_prices", []))),
        "ai_recommendation": "Kh√¥ng c√≥", "ai_reason": "Kh√¥ng ch·∫°y m√¥ h√¨nh AI ri√™ng", "gemini_analysis": gemini_analysis,
    }
    report.update(trading_signal)
    with open(f"vnstocks_data/{symbol}_report.json", "w", encoding="utf-8") as f:
        json.dump(report, f, ensure_ascii=False, indent=4)
    print(f"‚úÖ ƒê√£ l∆∞u b√°o c√°o ph√¢n t√≠ch v√†o file 'vnstocks_data/{symbol}_report.json'")
    return report

# --- Qu√©t danh s√°ch m√£ c·ªï phi·∫øu ---
def screen_stocks_parallel():
    """Qu√©t v√† ph√¢n t√≠ch nhi·ªÅu m√£ ch·ª©ng kho√°n tu·∫ßn t·ª± (sync)."""
    print(f"\n{'=' * 60}")
    print("QU√âT V√Ä PH√ÇN T√çCH DANH S√ÅCH M√É CH·ª®NG KHO√ÅN")
    print(f"{'=' * 60}")
    stock_list = get_vnstocks_list()
    symbols_to_analyze = stock_list["symbol"].head(20)
    results = []
    for symbol in symbols_to_analyze:
        try:
            result = analyze_stock(symbol)
            if result and result["signal"] != "L·ªñI":
                results.append(result)
                print(f"‚úÖ Ph√¢n t√≠ch m√£ {symbol} ho√†n t·∫•t.")
            else:
                print(f"‚ö†Ô∏è Ph√¢n t√≠ch m√£ {symbol} th·∫•t b·∫°i ho·∫∑c c√≥ l·ªói.")
        except Exception as e:
            print(f"‚ùå L·ªói khi ph√¢n t√≠ch m√£ {symbol}: {e}")
            traceback.print_exc()
    if results:
        results.sort(key=lambda x: x["score"], reverse=True)
        def get_nested_value(report_dict, key_path, default=None):
            keys = key_path.split(".")
            current_dict = report_dict
            try:
                for key in keys:
                    if isinstance(current_dict, dict) and key in current_dict:
                        current_dict = current_dict[key]
                    else:
                        return default
                if current_dict is None or (isinstance(current_dict, float) and (pd.isna(current_dict) or np.isinf(current_dict))):
                    return default
                return float(current_dict)
            except (ValueError, TypeError):
                return default
        data_for_df = []
        for r in results:
            row_data = {
                "M√£": r["symbol"], "Gi√°": r["current_price"], "ƒêi·ªÉm": r["score"], "T√≠n hi·ªáu": r["signal"],
                "ƒê·ªÅ xu·∫•t": r["recommendation"],
                "RSI": r["rsi_value"], "MA10": r["ma10"], "MA20": r["ma20"], "MA50": r["ma50"], "MA200": r["ma200"],
                "RS": r["rs"], "RS_Point": r["rs_point"],
                "RS_Point_252": r["rs_point_252"],
                "Ichimoku_Tenkan": r.get("ichimoku_tenkan_sen"),
                "Ichimoku_Kijun": r.get("ichimoku_kijun_sen"),
                "Ichimoku_Senkou_A": r.get("ichimoku_senkou_span_a"),
                "Ichimoku_Senkou_B": r.get("ichimoku_senkou_span_b"),
                "Ichimoku_Chikou": r.get("ichimoku_chikou_span"),
            }
            data_for_df.append(row_data)
        df_results = pd.DataFrame(data_for_df)
        df_results.to_csv("vnstocks_data/stock_screening_report.csv", index=False, encoding='utf-8-sig')
        print(f"‚úÖ ƒê√£ l∆∞u b√°o c√°o t·ªïng h·ª£p v√†o file 'vnstocks_data/stock_screening_report.csv'")
        return df_results
    else:
        print("‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch n√†o ƒë·ªÉ t·∫°o b√°o c√°o t·ªïng h·ª£p.")
        return None

# --- L·ªçc c·ªï phi·∫øu ---
def filter_stocks_low_pe_high_cap(min_market_cap=500):
    """L·ªçc c·ªï phi·∫øu theo ti√™u ch√≠ P/E th·∫•p v√† v·ªën h√≥a cao."""
    try:
        df = Screener().stock(params={"exchangeName": "HOSE,HNX,UPCOM"}, limit=1700)
        if df is None or df.empty:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu danh s√°ch c√¥ng ty ni√™m y·∫øt.")
            return None
        filtered_df = df[(df['market_cap'] > min_market_cap) &
                         (df['pe'] > 0) &
                         (df['pb'] > 0) &
                         (df['doe'] < 2) &
                         (df['volume'] > 100000)]
        return filtered_df
    except Exception as e:
        print(f"‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh l·ªçc c·ªï phi·∫øu: {e}")
        return None

# --- H√†m ch√≠nh ---
def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y ch∆∞∆°ng tr√¨nh."""
    print("=" * 60)
    print("H·ªÜ TH·ªêNG PH√ÇN T√çCH CH·ª®NG KHO√ÅN VI·ªÜT NAM")
    print("T√çCH H·ª¢P VNSTOCK, GOOGLE GEMINI & AI (LSTM N√ÇNG CAO)")
    print("=" * 60)
    min_cap = 500
    print(f"üîç ƒêang l·ªçc c·ªï phi·∫øu c√≥ P/E th·∫•p v√† v·ªën h√≥a > {min_cap} t·ª∑ VND...")
    filtered_stocks = filter_stocks_low_pe_high_cap(min_market_cap=min_cap)
    if filtered_stocks is not None and not filtered_stocks.empty:
        print("üöÄ B·∫Øt ƒë·∫ßu qu√©t v√† ph√¢n t√≠ch...")
        screen_stocks_parallel()
    else:
        print("üîç Kh√¥ng t√¨m ƒë∆∞·ª£c c·ªï phi·∫øu n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ l·ªçc.")
    print("\nNh·∫≠p m√£ c·ªï phi·∫øu ƒë·ªÉ ph√¢n t√≠ch ri√™ng l·∫ª (v√≠ d·ª•: VCB, FPT) ho·∫∑c 'exit' ƒë·ªÉ tho√°t:")
    user_input = input("Nh·∫≠p m√£ c·ªï phi·∫øu ƒë·ªÉ ph√¢n t√≠ch: ").strip().upper()
    if user_input and user_input.lower() != 'exit':
        tickers = [ticker.strip() for ticker in user_input.split(',')]
        for ticker in tickers:
            if ticker:
                print(f"\nPh√¢n t√≠ch m√£: {ticker}")
                analyze_stock(ticker)
        print("\n‚úÖ Ho√†n th√†nh ph√¢n t√≠ch. C√°c b√°o c√°o ƒë√£ ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c 'vnstocks_data/'.")
    else:
        print("üëã Tho√°t ch∆∞∆°ng tr√¨nh.")
if __name__ == "__main__":
    main()